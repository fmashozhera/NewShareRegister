// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ShareRegister.Application.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Company")]
    public partial class CompanyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Company.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Company", "This feature file is to test all features that affect the feature to create compa" +
                    "nies", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create company with valid information")]
        [NUnit.Framework.CategoryAttribute("Companies")]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "123456", "6875", "Madokero", "Harare", "Zimbabwe", "263", "email@domain.com", null)]
        public virtual void CreateCompanyWithValidInformation(string companyCode, string name, string iSIN, string street, string surburb, string city, string country, string postalCode, string email, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Companies"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            argumentsOfScenario.Add("Street", street);
            argumentsOfScenario.Add("Surburb", surburb);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("PostalCode", postalCode);
            argumentsOfScenario.Add("Email", email);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create company with valid information", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(string.Format("I provide the following information \'{0}\',\'{1}\',\'<Isin>\',\'{2}\',\'{3}\',\'{4}\',\'{5}\'," +
                            "\'{6}\',\'{7}\'", companyCode, name, street, surburb, city, country, postalCode, email), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table1.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table1.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table1.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 8
 testRunner.And("the telephone numbers are", ((string)(null)), table1, "And ");
#line hidden
#line 13
 testRunner.When("I create a company", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then("I should get a success Company result with", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a company with a company code that already exists")]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "123456", "6875", "Madokero", "Harare", "Zimbabwe", "263", "email@domain.com", "A company with the same company code already exists.", null)]
        public virtual void CreateACompanyWithACompanyCodeThatAlreadyExists(string companyCode, string name, string iSIN, string street, string surburb, string city, string country, string postalCode, string email, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            argumentsOfScenario.Add("Street", street);
            argumentsOfScenario.Add("Surburb", surburb);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("PostalCode", postalCode);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a company with a company code that already exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
 testRunner.Given(string.Format("I provide the following information with existing company code \'<ExistingCompanyC" +
                            "ode>\',\'{0}\',\'{1}\',\'<Isin>\',\'{2}\',\'{3}\',\'{4}\',\'{5}\',\'{6}\',\'{7}\'", companyCode, name, street, surburb, city, country, postalCode, email), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table2.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table2.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table2.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 22
 testRunner.And("the telephone numbers are", ((string)(null)), table2, "And ");
#line hidden
#line 27
 testRunner.When("I create a company", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then(string.Format("I should get a failure Company result with error message \'{0}\'", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a company with a company name that already exists")]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "123456", "6875", "Madokero", "Harare", "Zimbabwe", "263", "email@domain.com", "A company with the same name already exists.", null)]
        public virtual void CreateACompanyWithACompanyNameThatAlreadyExists(string companyCode, string name, string iSIN, string street, string surburb, string city, string country, string postalCode, string email, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            argumentsOfScenario.Add("Street", street);
            argumentsOfScenario.Add("Surburb", surburb);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("PostalCode", postalCode);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a company with a company name that already exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
 testRunner.Given(string.Format("I provide the following information with existing company name \'{0}\',\'{1}\',\'<Isin" +
                            ">\',\'{2}\',\'{3}\',\'{4}\',\'{5}\',\'{6}\',\'{7}\'", companyCode, name, street, surburb, city, country, postalCode, email), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table3.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table3.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table3.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 36
 testRunner.And("the telephone numbers are", ((string)(null)), table3, "And ");
#line hidden
#line 41
 testRunner.When("I create a company", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then(string.Format("I should get a failure Company result with error message \'{0}\'", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a company with a company ISIN that already exists")]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "123456", "6875", "Madokero", "Harare", "Zimbabwe", "263", "email@domain.com", "A company with the same ISIN already exists.", null)]
        public virtual void CreateACompanyWithACompanyISINThatAlreadyExists(string companyCode, string name, string iSIN, string street, string surburb, string city, string country, string postalCode, string email, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            argumentsOfScenario.Add("Street", street);
            argumentsOfScenario.Add("Surburb", surburb);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("PostalCode", postalCode);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a company with a company ISIN that already exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
 testRunner.Given(string.Format("I provide the following information with existing company ISIN \'{0}\',\'{1}\',\'<Isin" +
                            ">\',\'{2}\',\'{3}\',\'{4}\',\'{5}\',\'{6}\',\'{7}\'", companyCode, name, street, surburb, city, country, postalCode, email), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table4.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table4.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table4.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 50
 testRunner.And("the telephone numbers are", ((string)(null)), table4, "And ");
#line hidden
#line 55
 testRunner.When("I create a company", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.Then(string.Format("I should get a failure Company result with error message \'{0}\'", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
