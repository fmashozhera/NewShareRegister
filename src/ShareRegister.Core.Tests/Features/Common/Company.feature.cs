// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ShareRegister.Core.Tests.Features.Common
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Company")]
    public partial class CompanyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Company.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Common", "Company", "Create and manage company objects", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("[Create a valid company]")]
        [NUnit.Framework.CategoryAttribute("common")]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "123456", null)]
        public virtual void CreateAValidCompany(string companyCode, string name, string iSIN, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "common"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Create a valid company]", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(string.Format("I capture the  valid values \'{0}\',\'{1}\',\'{2}\'", companyCode, name, iSIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table25.AddRow(new string[] {
                            "Street",
                            "6875"});
                table25.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table25.AddRow(new string[] {
                            "City",
                            "Harare"});
                table25.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table25.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 8
 testRunner.When("the Address is", ((string)(null)), table25, "When ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table26.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table26.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table26.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 15
 testRunner.And("the telephone numbers are", ((string)(null)), table26, "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email"});
                table27.AddRow(new string[] {
                            "fmashozhera@gmail.com"});
#line 20
 testRunner.And("the email address", ((string)(null)), table27, "And ");
#line hidden
#line 23
 testRunner.When("I create a company", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.Then("I should get a success Company result with", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("[Create a invalid company]")]
        [NUnit.Framework.TestCaseAttribute("", "Mashozhera Holdings", "123456", "CompanyCode is required.", null)]
        [NUnit.Framework.TestCaseAttribute("Mash", "", "123456", "Name is required.", null)]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "", "ISIN is required.", null)]
        public virtual void CreateAInvalidCompany(string companyCode, string name, string iSIN, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Create a invalid company]", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
 testRunner.Given(string.Format("I capture the  valid values \'{0}\',\'{1}\',\'{2}\'", companyCode, name, iSIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table28.AddRow(new string[] {
                            "Street",
                            "6875"});
                table28.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table28.AddRow(new string[] {
                            "City",
                            "Harare"});
                table28.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table28.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 32
 testRunner.When("the Address is", ((string)(null)), table28, "When ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table29.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table29.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table29.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 39
 testRunner.And("the telephone numbers are", ((string)(null)), table29, "And ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email"});
                table30.AddRow(new string[] {
                            "fmashozhera@gmail.com"});
#line 44
 testRunner.And("the email address", ((string)(null)), table30, "And ");
#line hidden
#line 47
 testRunner.When("I create a with invalid company details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
 testRunner.Then(string.Format("I should get a failure Company result with message \'{0}\'", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("[Create a company with no address]")]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "123456", "Address is required.", null)]
        public virtual void CreateACompanyWithNoAddress(string companyCode, string name, string iSIN, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Create a company with no address]", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 57
 testRunner.Given(string.Format("I capture the  valid values \'{0}\',\'{1}\',\'{2}\'", companyCode, name, iSIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table31.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table31.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table31.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 58
 testRunner.And("the telephone numbers are", ((string)(null)), table31, "And ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email"});
                table32.AddRow(new string[] {
                            "fmashozhera@gmail.com"});
#line 63
 testRunner.And("the email address", ((string)(null)), table32, "And ");
#line hidden
#line 66
 testRunner.When("I create a with company no address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
 testRunner.Then(string.Format("I should get a failure Company result with message \'{0}\'", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("[Create a company with no telephone numbers]")]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "123456", "Telephone numbers are required.", null)]
        public virtual void CreateACompanyWithNoTelephoneNumbers(string companyCode, string name, string iSIN, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Create a company with no telephone numbers]", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 75
 testRunner.Given(string.Format("I capture the  valid values \'{0}\',\'{1}\',\'{2}\'", companyCode, name, iSIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table33.AddRow(new string[] {
                            "Street",
                            "6875"});
                table33.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table33.AddRow(new string[] {
                            "City",
                            "Harare"});
                table33.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table33.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 76
 testRunner.When("the Address is", ((string)(null)), table33, "When ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email"});
                table34.AddRow(new string[] {
                            "fmashozhera@gmail.com"});
#line 83
 testRunner.And("the email address", ((string)(null)), table34, "And ");
#line hidden
#line 86
 testRunner.When("I create a with invalid company details with no telephone numbers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
 testRunner.Then(string.Format("I should get a failure Company result with message \'{0}\'", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("[Create a company with no email]")]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "123456", "Email is required.", null)]
        public virtual void CreateACompanyWithNoEmail(string companyCode, string name, string iSIN, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Create a company with no email]", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 94
 testRunner.Given(string.Format("I capture the  valid values \'{0}\',\'{1}\',\'{2}\'", companyCode, name, iSIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table35.AddRow(new string[] {
                            "Street",
                            "6875"});
                table35.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table35.AddRow(new string[] {
                            "City",
                            "Harare"});
                table35.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table35.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 95
 testRunner.When("the Address is", ((string)(null)), table35, "When ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table36.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table36.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table36.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 102
 testRunner.And("the telephone numbers are", ((string)(null)), table36, "And ");
#line hidden
#line 107
 testRunner.When("I create a company with no email address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
 testRunner.Then(string.Format("I should get a failure Company result with message \'{0}\'", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("[Update a valid company]")]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "123456", null)]
        public virtual void UpdateAValidCompany(string companyCode, string name, string iSIN, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Update a valid company]", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 115
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 116
 testRunner.Given("I have a valid company", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 117
 testRunner.Given(string.Format("I capture the  valid values \'{0}\',\'{1}\',\'{2}\'", companyCode, name, iSIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table37.AddRow(new string[] {
                            "Street",
                            "6875"});
                table37.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table37.AddRow(new string[] {
                            "City",
                            "Harare"});
                table37.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table37.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 118
 testRunner.When("the Address is", ((string)(null)), table37, "When ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table38.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table38.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table38.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 125
 testRunner.And("the telephone numbers are", ((string)(null)), table38, "And ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email"});
                table39.AddRow(new string[] {
                            "fmashozhera@gmail.com"});
#line 130
 testRunner.And("the email address", ((string)(null)), table39, "And ");
#line hidden
#line 133
 testRunner.When("I update a company", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
 testRunner.Then("I should get a success Company result with", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("[Update a invalid company]")]
        [NUnit.Framework.TestCaseAttribute("", "Mashozhera Holdings", "123456", "CompanyCode is required.", null)]
        [NUnit.Framework.TestCaseAttribute("Mash", "", "123456", "Name is required.", null)]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "", "ISIN is required.", null)]
        public virtual void UpdateAInvalidCompany(string companyCode, string name, string iSIN, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Update a invalid company]", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 140
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 141
 testRunner.Given("I have a valid company", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 142
 testRunner.Given(string.Format("I capture the  valid values \'{0}\',\'{1}\',\'{2}\'", companyCode, name, iSIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table40.AddRow(new string[] {
                            "Street",
                            "6875"});
                table40.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table40.AddRow(new string[] {
                            "City",
                            "Harare"});
                table40.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table40.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 143
 testRunner.When("the Address is", ((string)(null)), table40, "When ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table41.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table41.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table41.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 150
 testRunner.And("the telephone numbers are", ((string)(null)), table41, "And ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email"});
                table42.AddRow(new string[] {
                            "fmashozhera@gmail.com"});
#line 155
 testRunner.And("the email address", ((string)(null)), table42, "And ");
#line hidden
#line 158
 testRunner.When(string.Format("I update a with invalid company details \'{0}\',\'{1}\',\'{2}\'", companyCode, name, iSIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 159
 testRunner.Then(string.Format("I should get a failure Company result with message \'{0}\'", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("[Update a company with no address]")]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "123456", "Address is required.", null)]
        public virtual void UpdateACompanyWithNoAddress(string companyCode, string name, string iSIN, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Update a company with no address]", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 167
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 168
 testRunner.Given("I have a valid company", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 169
 testRunner.Given(string.Format("I capture the  valid values \'{0}\',\'{1}\',\'{2}\'", companyCode, name, iSIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table43.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table43.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table43.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 170
 testRunner.And("the telephone numbers are", ((string)(null)), table43, "And ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email"});
                table44.AddRow(new string[] {
                            "fmashozhera@gmail.com"});
#line 175
 testRunner.And("the email address", ((string)(null)), table44, "And ");
#line hidden
#line 178
 testRunner.When("I update a with company no address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 180
 testRunner.Then(string.Format("I should get a failure Company result with message \'{0}\'", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("[Update a company with no telephone numbers]")]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "123456", "Telephone numbers are required.", null)]
        public virtual void UpdateACompanyWithNoTelephoneNumbers(string companyCode, string name, string iSIN, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Update a company with no telephone numbers]", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 186
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 187
 testRunner.Given("I have a valid company", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 188
 testRunner.Given(string.Format("I capture the  valid values \'{0}\',\'{1}\',\'{2}\'", companyCode, name, iSIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table45.AddRow(new string[] {
                            "Street",
                            "6875"});
                table45.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table45.AddRow(new string[] {
                            "City",
                            "Harare"});
                table45.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table45.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 189
 testRunner.When("the Address is", ((string)(null)), table45, "When ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email"});
                table46.AddRow(new string[] {
                            "fmashozhera@gmail.com"});
#line 196
 testRunner.And("the email address", ((string)(null)), table46, "And ");
#line hidden
#line 199
 testRunner.When("I update a with invalid company details with no telephone numbers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 201
 testRunner.Then(string.Format("I should get a failure Company result with message \'{0}\'", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("[Update a company with no email]")]
        [NUnit.Framework.TestCaseAttribute("Mash", "Mashozhera Holdings", "123456", "Email is required.", null)]
        public virtual void UpdateACompanyWithNoEmail(string companyCode, string name, string iSIN, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CompanyCode", companyCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ISIN", iSIN);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Update a company with no email]", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 206
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 207
 testRunner.Given("I have a valid company", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 208
 testRunner.Given(string.Format("I capture the  valid values \'{0}\',\'{1}\',\'{2}\'", companyCode, name, iSIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table47.AddRow(new string[] {
                            "Street",
                            "6875"});
                table47.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table47.AddRow(new string[] {
                            "City",
                            "Harare"});
                table47.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table47.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 209
 testRunner.When("the Address is", ((string)(null)), table47, "When ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table48.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table48.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table48.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 216
 testRunner.And("the telephone numbers are", ((string)(null)), table48, "And ");
#line hidden
#line 221
 testRunner.When("I update a company with no email address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 222
 testRunner.Then(string.Format("I should get a failure Company result with message \'{0}\'", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
