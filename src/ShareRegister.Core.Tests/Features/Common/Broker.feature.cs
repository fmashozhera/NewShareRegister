// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ShareRegister.Core.Tests.Features.Common
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Broker")]
    public partial class BrokerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Broker.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Common", "Broker", "Broker management feature", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a broker providing valid information")]
        [NUnit.Framework.CategoryAttribute("tag1")]
        [NUnit.Framework.TestCaseAttribute("CBZ", "CBZ", null)]
        public virtual void CreateABrokerProvidingValidInformation(string brokerCode, string name, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("BrokerCode", brokerCode);
            argumentsOfScenario.Add("Name", name);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a broker providing valid information", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(string.Format("I capture the following broker information \'{0}\',\'{1}\'", brokerCode, name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table11.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table11.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table11.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 8
 testRunner.And("the broker telephone numbers", ((string)(null)), table11, "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "Street",
                            "6875"});
                table12.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table12.AddRow(new string[] {
                            "City",
                            "Harare"});
                table12.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table12.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 13
 testRunner.And("the broker Address", ((string)(null)), table12, "And ");
#line hidden
#line 20
 testRunner.When("I save the broker information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.Then("Then I should get a success broker result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a broker without providing broker name or broker code")]
        [NUnit.Framework.TestCaseAttribute("", "CBZ", "Broker code is required.", null)]
        [NUnit.Framework.TestCaseAttribute("CBZ", "", "Broker name is required.", null)]
        public virtual void CreateABrokerWithoutProvidingBrokerNameOrBrokerCode(string brokerCode, string name, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("BrokerCode", brokerCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a broker without providing broker name or broker code", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
 testRunner.Given(string.Format("I capture the following broker information \'{0}\',\'{1}\'", brokerCode, name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table13.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table13.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table13.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 30
 testRunner.And("the broker telephone numbers", ((string)(null)), table13, "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table14.AddRow(new string[] {
                            "Street",
                            "6875"});
                table14.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table14.AddRow(new string[] {
                            "City",
                            "Harare"});
                table14.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table14.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 35
 testRunner.And("the broker Address", ((string)(null)), table14, "And ");
#line hidden
#line 42
 testRunner.When("I save the broker information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then(string.Format("Then I should get a failure broker result with message \'{0}\'", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a broker providing an address")]
        [NUnit.Framework.TestCaseAttribute("CBZ", "CBZ", "Broker address is required.", null)]
        public virtual void CreateABrokerProvidingAnAddress(string brokerCode, string name, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("BrokerCode", brokerCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a broker providing an address", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 51
 testRunner.Given(string.Format("I capture the following broker information \'{0}\',\'{1}\'", brokerCode, name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table15.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table15.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table15.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 52
 testRunner.And("the broker telephone numbers", ((string)(null)), table15, "And ");
#line hidden
#line 57
 testRunner.When("I save the broker information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.Then(string.Format("Then I should get a failure broker result with message \'{0}\'", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a broker providing telephone numbers")]
        [NUnit.Framework.TestCaseAttribute("CBZ", "CBZ", "Enter at least one telephone number.", null)]
        public virtual void CreateABrokerProvidingTelephoneNumbers(string brokerCode, string name, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("BrokerCode", brokerCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a broker providing telephone numbers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 65
 testRunner.Given(string.Format("I capture the following broker information \'{0}\',\'{1}\'", brokerCode, name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table16.AddRow(new string[] {
                            "Street",
                            "6875"});
                table16.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table16.AddRow(new string[] {
                            "City",
                            "Harare"});
                table16.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table16.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 66
 testRunner.And("the broker Address", ((string)(null)), table16, "And ");
#line hidden
#line 73
 testRunner.When("I save the broker information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.Then(string.Format("Then I should get a failure broker result with message \'{0}\'", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a broker providing valid information")]
        [NUnit.Framework.TestCaseAttribute("CBZ", "CBZ", "Updated CBZ", "Updated CBZ", null)]
        public virtual void UpdateABrokerProvidingValidInformation(string brokerCode, string name, string updatedBrokerCode, string updatedName, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("BrokerCode", brokerCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("UpdatedBrokerCode", updatedBrokerCode);
            argumentsOfScenario.Add("UpdatedName", updatedName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a broker providing valid information", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 81
 testRunner.Given(string.Format("I have a broker with the following information  \'{0}\',\'{1}\'", brokerCode, name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table17.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table17.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table17.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 82
 testRunner.And("the broker telephone numbers", ((string)(null)), table17, "And ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table18.AddRow(new string[] {
                            "Street",
                            "6875"});
                table18.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table18.AddRow(new string[] {
                            "City",
                            "Harare"});
                table18.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table18.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 87
 testRunner.And("the broker Address", ((string)(null)), table18, "And ");
#line hidden
#line 94
 testRunner.When("I retrieve the broker information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
 testRunner.And(string.Format("I update the information with the following valid information \'{0}\',\'{1}\'", updatedBrokerCode, updatedName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.Then(string.Format("I should get a success broker result with the broker information updated to \'{0}\'" +
                            ",\'{1}\'", updatedBrokerCode, updatedName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a broker providing invalid information")]
        [NUnit.Framework.TestCaseAttribute("CBZ", "CBZ", "", "Updated CBZ", "Broker code is required.", null)]
        [NUnit.Framework.TestCaseAttribute("CBZ", "CBZ", "Updated broker code", "", "Broker name is required.", null)]
        public virtual void UpdateABrokerProvidingInvalidInformation(string brokerCode, string name, string updatedBrokerCode, string updatedName, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("BrokerCode", brokerCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("UpdatedBrokerCode", updatedBrokerCode);
            argumentsOfScenario.Add("UpdatedName", updatedName);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a broker providing invalid information", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 103
 testRunner.Given(string.Format("I have a broker with the following information  \'{0}\',\'{1}\'", brokerCode, name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table19.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table19.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table19.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 104
 testRunner.And("the broker telephone numbers", ((string)(null)), table19, "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table20.AddRow(new string[] {
                            "Street",
                            "6875"});
                table20.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table20.AddRow(new string[] {
                            "City",
                            "Harare"});
                table20.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table20.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 109
 testRunner.And("the broker Address", ((string)(null)), table20, "And ");
#line hidden
#line 116
 testRunner.When("I retrieve the broker information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
 testRunner.And(string.Format("I update the information with the following valid information \'{0}\',\'{1}\'", updatedBrokerCode, updatedName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
 testRunner.Then(string.Format("Then I should get a failure broker result with message \'{0}\'", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a broker without providing address")]
        [NUnit.Framework.TestCaseAttribute("CBZ", "CBZ", "Updated broker code", "Updated CBZ", "Broker address is required.", null)]
        public virtual void UpdateABrokerWithoutProvidingAddress(string brokerCode, string name, string updatedBrokerCode, string updatedName, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("BrokerCode", brokerCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("UpdatedBrokerCode", updatedBrokerCode);
            argumentsOfScenario.Add("UpdatedName", updatedName);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a broker without providing address", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 125
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 126
 testRunner.Given(string.Format("I have a broker with the following information  \'{0}\',\'{1}\'", brokerCode, name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table21.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table21.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table21.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 127
 testRunner.And("the broker telephone numbers", ((string)(null)), table21, "And ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table22.AddRow(new string[] {
                            "Street",
                            "6875"});
                table22.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table22.AddRow(new string[] {
                            "City",
                            "Harare"});
                table22.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table22.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 132
 testRunner.And("the broker Address", ((string)(null)), table22, "And ");
#line hidden
#line 139
 testRunner.When("I retrieve the broker information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
 testRunner.And(string.Format("I update the information with the following valid information \'{0}\',\'{1}\' but do " +
                            "not provide an address", updatedBrokerCode, updatedName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.Then(string.Format("Then I should get a failure broker result with message \'{0}\'", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a broker without providing telephone numbers")]
        [NUnit.Framework.TestCaseAttribute("CBZ", "CBZ", "Updated broker code", "Updated CBZ", "Enter at least one telephone number.", null)]
        public virtual void UpdateABrokerWithoutProvidingTelephoneNumbers(string brokerCode, string name, string updatedBrokerCode, string updatedName, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("BrokerCode", brokerCode);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("UpdatedBrokerCode", updatedBrokerCode);
            argumentsOfScenario.Add("UpdatedName", updatedName);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a broker without providing telephone numbers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 146
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 147
 testRunner.Given(string.Format("I have a broker with the following information  \'{0}\',\'{1}\'", brokerCode, name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "TelephoneNumber",
                            "TelephoneNumberType"});
                table23.AddRow(new string[] {
                            "123456",
                            "Mobile"});
                table23.AddRow(new string[] {
                            "78910",
                            "Landline"});
                table23.AddRow(new string[] {
                            "11111",
                            "VoIP"});
#line 148
 testRunner.And("the broker telephone numbers", ((string)(null)), table23, "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table24.AddRow(new string[] {
                            "Street",
                            "6875"});
                table24.AddRow(new string[] {
                            "Surburb",
                            "Madokero"});
                table24.AddRow(new string[] {
                            "City",
                            "Harare"});
                table24.AddRow(new string[] {
                            "Country",
                            "Zimbabwe"});
                table24.AddRow(new string[] {
                            "PostalCode",
                            "263"});
#line 153
 testRunner.And("the broker Address", ((string)(null)), table24, "And ");
#line hidden
#line 160
 testRunner.When("I retrieve the broker information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 161
 testRunner.And(string.Format("I update the information with the following valid information \'{0}\',\'{1}\' but do " +
                            "not provide telepone numbers", updatedBrokerCode, updatedName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
 testRunner.Then(string.Format("Then I should get a failure broker result with message \'{0}\'", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
